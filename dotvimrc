set nocompatible              " be iMproved, required
filetype off                  " required
set wildignore+=*/target*,*/tmp/*,*/node_modules/*,*/vendor/*,*/bower_components/*,*/dist/*,*/bin/*
if has("win16") || has("win32") || has("win64")
  if &shell=~#'bash$'
    set shell=$COMSPEC " sets shell to correct path for cmd.exe
  endif
endif
"'''''''''''''' VUNDLE ''''''''''''''''''
let vimDir = '$HOME/.vim'
let &runtimepath .= ',' . expand(vimDir . '/bundle/Vundle.vim')
call vundle#begin(expand(vimDir . '/bundle'))

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-ragtag'                 " amounst other things closes an open html/xml tag using <C-X>/ while in insert mode
Plugin 'tpope/vim-surround'                "allows you to enclose text with quotes using cs<from><to> e.g. cs[( to change brackets
Plugin 'kien/ctrlp.vim'                   " fuzzy search files in your directory structure by name using <C-p>
Plugin 'jlanzarotta/bufexplorer'          " lists open, and previously opened buffers by typing \be
Plugin 'mustache/vim-mustache-handlebars' " sytax highlighting and completions for {{}}
Plugin 'flazz/vim-colorschemes'           " color schemes
Plugin 'derekwyatt/vim-scala'             " Scala specific features and TagBar support
Plugin 'bling/vim-airline'                " Pretty status bar at bottom of file
Plugin 'vim-airline/vim-airline-themes'   " themes for air-line
Plugin 'yegappan/mru'                     " Open Most Recently Used files using :MRU https://github.com/vim-scripts/mru.vim
Plugin 'rking/ag.vim'                     " Allows searching across files using :Ag <search term>
Plugin 'vim-syntastic/syntastic'          " Adds syntax checking when saving a file
Plugin 'pangloss/vim-javascript'          " fixes indent problems I have
Plugin 'majutsushi/tagbar'                " needed by vim-scala, uses it's ctags definitions to navigate through the hierarchy of a Scala file
Plugin 'kien/rainbow_parentheses.vim'     " Colors matching parenthesis
Plugin 'regedarek/ZoomWin'                " allows you to zoom a window to fullscreen using <C-w>o
Plugin 'tpope/vim-fugitive'               " adds nice git commands and diff tools (:Gdiff, :Gwrite using vim's :diffput/:diffget)
Plugin 'drmikehenry/vim-fontsize'         " Allows increasing font-size using <Leader><Leader>+
Plugin 'vim-scripts/marvim'               " Allows you to persist macros between sessions 
Plugin 'tpope/vim-obsession'              " Allows you to persist window layouts between sessions 
Plugin 'tpope/vim-projectionist'          " Used to 'jump between' related Ember files using :A, :AS, :AV (need a .projections.json file in the project folder https://gist.github.com/AndrewRadev/3524ee46bca8ab349329)
Plugin 'AndrewRadev/ember_tools.vim'      " Allows you to type 'gf' while on a HandleBars component to take you to the code for that helper, or on an Injected service
Plugin 'scrooloose/nerdtree'              " Shows a hierarchy of the current folder structure
Plugin 'Xuyuanp/nerdtree-git-plugin'      " Plugin for NerdTree that shows git file status icons
Plugin 'alvan/vim-closetag'               " Auto-completes html/xml tags, see below for configuration

call vundle#end()            " required
filetype plugin indent on    " required
"'''''''''''''' VUNDLE ''''''''''''''''''

set nowrap 
set autoindent expandtab smarttab           " settings for indentation
set tabstop=2 shiftwidth=2 softtabstop=2    " use 2 spaces for indenting
set nobackup nowritebackup                  " turn off backup file creation
set history=1000                            " remember the last 1000 command instead of the default 20
set cursorline                              " highlight the current line
colorscheme wombat
let g:mustache_abbreviations = 1
syntax on                                   " automatic syntax highlighting
if has('win32')
  set gfn=Consolas:h16
elseif has('mac')
  set gfn=Menlo\ Regular:h16
elseif has('unix')
  set gfn=Ubuntu\ Mono\ 16
endif

" Set the swap folders so swap files don't pollute the current dir
let backup_folder = $HOME . '/.vim/_backup'
let temp_folder = $HOME . '/.vim/_temp'
if !isdirectory(backup_folder)
  call mkdir(backup_folder, "p")
endif
if !isdirectory(temp_folder)
  call mkdir(temp_folder, "p")
endif
let &backupdir=backup_folder    " where to put backup files.
let &directory=temp_folder      " where to put swap files.


set laststatus=2                            " vim-airline will display proper
                                            " StatusLine even when there is no
                                            " split window
let g:airline_theme='wombat'
let g:airline_powerline_fonts = 0           " no clue how to install these cool fonts, so disable airline's use of them

set listchars=tab:->,trail:ยบ                " distinguish tabs from spaces
set list                                    " show spaces and tabs
set fileformat=unix                         " default to unix file endings
set fileformats=unix,dos
set relativenumber                          " show line numbers as 'distance from current line'
set number                                  " however, make the current line show it's absolute line number insted of 0

"""""""""""""""""""""""""""""""""
"         Mappings              "
"""""""""""""""""""""""""""""""""
" open ~/.vimrc (or ~/_vimrc) with \ev
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" source ~/.vimrc (or ~/_vimrc) to realize changes with \sv
nnoremap <leader>sv :source $MYVIMRC<cr>

" open NERDTree
nnoremap <leader>nt :NERDTree<cr>

" Map System clipboard copy/paste
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

"TagBar activation by using F8 key
nmap <F8> :TagbarToggle<CR>
"""""""""""""""""""""""""""""""""

let g:scala_use_builtin_tagbar_defs = 1
"Rainbow parens, make curly braces rainbowed
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadBraces
set diffopt+=vertical                      " make it so fugitive's GDiff does a 3-way merge in vertical splits

"load previous windows saved via tpope's Obession plugin
augroup sourcesession
        autocmd!
        autocmd VimEnter * nested
        \ if !argc() && empty(v:this_session) && filereadable('Session.vim') |
        \   source Session.vim |
        \ endif
augroup END


"'''''' vim-closetag '''''''
" filenames like *.xml, *.html, *.xhtml, ...
" Then after you press <kbd>&gt;</kbd> in these files, this plugin will try to close the current tag.
"
let g:closetag_filenames = '*.xml,*.html,*.xhtml,*.phtml'

" filenames like *.xml, *.xhtml, ...
" This will make the list of non closing tags self closing in the specified files.
"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" integer value [0|1]
" This will make the list of non closing tags case sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
"
let g:closetag_emptyTags_caseSensitive = 1

" Shortcut for closing tags, default is '>'
"
let g:closetag_shortcut = '>'

" Add > at current position without closing the current tag, default is ''
"
let g:closetag_close_shortcut = '<leader>>'
"'''''''''''''''''''''''''''

"'''''' vim-syntastic '''''''
"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exec = 'eslint'

"'''''''''''''''''''''''''''
